
import java.util.Stack;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.bind.DatatypeConverter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author david
 */
public class Analizador extends javax.swing.JFrame {
public Stack <Integer> pE=new Stack <Integer>();
public Stack  poperadores =new Stack ();
public Stack  poperandos =new Stack ();
public Stack  poperandoscompara =new Stack (),poperanco2 = new Stack();
public Stack  tiposcompara =new Stack ();
public Stack  psaltos =new Stack ();
public Stack  tipos =new Stack ();
String tip="",operando="",operadores="",tipo="",op1="",op2="",oper="",res="",tipoq="",operando1="",saltos="",resTipo="";
String err="",peek="";
int num=1,tipo1=0;
int indice=1; 
String [] variable;
boolean plus=false,resta=false,multi=false,divi=false,igual=false,men=false,may=false,WHILE=false,
        meni=false,mayi=false,difde=false,If=false,forr=false,whilee=false,elsee=false,endif=false,Endw=false;
                                //OP1 OP2 +-*  /  d.m rec and nor or
static int [][] matrizDeTipos  ={{138,138,138,139,138,142,544},
                                 {138,139,139,139,544,142,544},
                                 {138,140,544,544,544,544,544},
                                 {138,141,544,544,544,544,544},
                                 {138,142,544,544,544,544,544},
                                 {139,138,139,139,544,142,544},
                                 {139,139,139,139,544,142,544},
                                 {139,140,544,544,544,544,544},
                                 {139,141,544,544,544,544,544},
                                 {139,142,544,544,544,544,544},
                                 {140,138,544,544,544,544,544},
                                 {140,139,544,544,544,544,544},
                                 {140,140,544,544,544,142,544},
                                 {140,141,544,544,544,544,544},
                                 {140,142,544,544,544,544,544},
                                 {141,138,544,544,544,544,544},
                                 {141,139,544,544,544,544,544},
                                 {141,140,544,544,544,142,544},
                                 {141,141,544,544,544,142,544},
                                 {141,142,544,544,544,544,544},
                                 {142,138,544,544,544,544,544},
                                 {142,139,544,544,544,544,544},
                                 {142,140,544,544,544,544,544},
                                 {142,141,544,544,544,544,544},
                                 {142,142,544,544,544,142,142}};
String[] columnNames = {"#", "OPER", "OP1", "OP2", "RES"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
    /**
     * Creates new form Analizador
     */
    public Analizador() {
        initComponents();
        tabla.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        txta = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtsaltos = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        txterr = new javax.swing.JTextPane();
        jScrollPane9 = new javax.swing.JScrollPane();
        txttipos = new javax.swing.JTextArea();
        jScrollPane10 = new javax.swing.JScrollPane();
        txtoperadores = new javax.swing.JTextArea();
        jScrollPane11 = new javax.swing.JScrollPane();
        txtoperandos = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane2.setViewportView(txta);

        jScrollPane4.setViewportView(txtsaltos);

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton1");

        jScrollPane7.setViewportView(txterr);

        txttipos.setColumns(20);
        txttipos.setRows(5);
        jScrollPane9.setViewportView(txttipos);

        txtoperadores.setColumns(20);
        txtoperadores.setRows(5);
        jScrollPane10.setViewportView(txtoperadores);

        txtoperandos.setColumns(20);
        txtoperandos.setRows(5);
        jScrollPane11.setViewportView(txtoperandos);

        jLabel1.setText("Entrada");

        jLabel2.setText("Cuadruplos");

        jLabel3.setText("Errores");

        jLabel4.setText("Tipos");

        jLabel5.setText("Tipos");

        jLabel6.setText("Tipos");

        jLabel7.setText("Tipos");

        jScrollPane1.setViewportView(tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane7)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(41, 41, 41)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(104, 104, 104))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton1)))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    int reservadas(String reservada)
{
    
   

   
     switch (reservada)
            {
                case "import":
                    return 1;
                case "class":
                    return 2;
                case "begin":
                    return 3;
                case "end":
                    return 4;
                case "def":
                    return 5;
                case "as":
                    return 6;
                case "integer":
                    return 7;
                case "float":
                    return 8;
                case "char":
                    return 9;
                case "string":
                    return 10;
                case "boolean":
                    return 11;
                case "if":
                    return 12;
                case "endif":
                    return 13;
                case "else":
                    return 14;
                case "endwhile":
                    return 15;
                case "while":
                    return 16;
                case "endfor":
                    return 17;
                case "for":
                    return 18;
                case "enter":
                    return 19;
                case "write":
                    return 20;
                case "read":
                    return 21;
                case "principal":
                    return 22;
                case "elseif":
                    return 23;
                case "function":
                    return 24;
                case "endfunction":
                    return 25;
                case "null":
                    return 26;
                case "include":
                    return 27;
                case "+":
                    return 28;
                case "-":
                    return 29;
                case "*":
                    return 30;
                case "/":
                    return 31;
                case "=":
                    return 32;
                case ",":
                    return 33;
                case ";":
                    return 34;
                case "<":
                    return 35;
                case ">":
                    return 36;
                case ">=":
                    return 37;
                case "<=":
                    return 38;
                case "!=":
                    return 39;
                case "(":
                    return 40;
                case ")":
                    return 41;
                case ":":
                    return 42;
                case "1":return 43;case "2":return 43;case "3":return 43;case "4":return 43;case "5":return 43;
                case "10":return 43;case "9":return 43;case "8":return 43;case "7":return 43;case "6":return 43;case "0":return 43;
                
                
            }
        return 0;
}
void comparatipos(String a, String b, String o) {
        /*
    e=1
    f=2
    c=3
    s=4
         */
        JOptionPane.showMessageDialog(null, a + " " + b + " " + o);
	
	//ERRORES
	
        if ("integer".equals(a) && "integer".equals(b) && ("AND".equals(o) || "NOR".equals(o) || "OR".equals(o))) {
            err += "Error entre tipos \n";
        }
        if ("integer".equals(a) && "float".equals(b) && ("mod".equals(o)) && ("AND".equals(o) || "NOR".equals(o) || "OR".equals(o))) {
            err += "Error entre tipos \n";
        }
        if ("integer".equals(a) && "char".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("integer".equals(a) && "string".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("integer".equals(a) && "boolean".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("float".equals(a) && "integer".equals(b) && ("mod".equals(o)) && ("AND".equals(o) || "NOR".equals(o) || "OR".equals(o))) {
            err += "Error entre tipos \n";
        }
        if ("float".equals(a) && "float".equals(b) && ("mod".equals(o)) && ("AND".equals(o) || "NOR".equals(o) || "OR".equals(o))) {
            err += "Error entre tipos \n";
        }
        if ("float".equals(a) && "char".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("float".equals(a) && "string".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("float".equals(a) && "boolean".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("char".equals(a) && "integer".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("char".equals(a) && "float".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("char".equals(a) && "char".equals(b) && ("*".equals(o) || "+".equals(o)) || ("-".equals(o) || "/".equals(o)) && ("mod".equals(o)) && ("AND".equals(o) || "NOR".equals(o) || "OR".equals(o))) {
            err += "Error entre tipos \n";
        }
        if ("char".equals(a) && "string".equals(b) && ("*".equals(o) || "+".equals(o)) || ("-".equals(o) || "/".equals(o)) && ("mod".equals(o)) && ("AND".equals(o) || "NOR".equals(o) || "OR".equals(o))) {
            err += "Error entre tipos \n";
        }
        if ("char".equals(a) && "boolean".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("string" == a && "integer" == b) {
            err += "Error entre tipos \n";

        }
        if ("string".equals(a) && "flotante".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("string".equals(a) && "char".equals(b) && ("*".equals(o) || "+".equals(o)) || ("-".equals(o) || "/".equals(o)) && ("mod".equals(o)) && ("AND".equals(o) || "NOR".equals(o) || "OR".equals(o))) {
            err += "Error entre tipos \n";
        }
        if ("string".equals(a) && "string".equals(b) && ("*".equals(o) || "+".equals(o)) || ("-".equals(o) || "/".equals(o)) && ("mod".equals(o)) && ("AND".equals(o) || "NOR".equals(o) || "OR".equals(o))) {
            err += "Error entre tipos \n";
        }
        if ("string".equals(a) && "boolean".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("boolean".equals(a) && "integer".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("boolean".equals(a) && "flotante".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("boolean".equals(a) && "char".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("boolean".equals(a) && "string".equals(b)) {
            err += "Error entre tipos \n";
        }
        if ("boolean".equals(a) && "boolean".equals(b) && ("*".equals(o) || "+".equals(o)) || ("-".equals(o) || "/".equals(o)) && ("mod".equals(o))) {
            err += "Error entre tipos \n";
        }

	//Tipos de resultado

	//Integer
	
	if ("integer".equals(a) && "integer".equals(b) && ("*".equals(o) || "+".equals(o) || "-".equals(o) || "mod".equals(o))) {
            
	resTipo = "integer";

        }
	
	if ("integer".equals(a) && "integer".equals(b) && "/".equals(o)) {
            
	resTipo = "float";

        }

	if ("integer".equals(a) && "integer".equals(b) && ("==".equals(o) || "<".equals(o) || ">".equals(o) || "<=".equals(o) || ">=".equals(o))) {
            
	resTipo = "boolean";

        }

	if ("integer".equals(a) && "float".equals(b) && ("*".equals(o) || "+".equals(o) || "-".equals(o) || "/".equals(o))) {
            
	resTipo = "float";

        }
	
	if ("integer".equals(a) && "float".equals(b) && ("==".equals(o) || "<".equals(o) || ">".equals(o) || "<=".equals(o) || ">=".equals(o))) {
            
	resTipo = "boolean";

        }
	
	//Float
	if ("float".equals(a) && "integer".equals(b) && ("*".equals(o) || "+".equals(o) || "-".equals(o) || "/".equals(o))) {
            
	resTipo = "float";

        }
	
	if ("float".equals(a) && "integer".equals(b) && ("==".equals(o) || "<".equals(o) || ">".equals(o) || "<=".equals(o) || ">=".equals(o))) {
            
	resTipo = "boolean";

        }
	
	//Char
	if ("char".equals(a) && "char".equals(b) && ("==".equals(o) || "<".equals(o) || ">".equals(o) || "<=".equals(o) || ">=".equals(o))) {
            
	resTipo = "boolean";

        }
	
	if ("char".equals(a) && "string".equals(b) && ("==".equals(o) || "<".equals(o) || ">".equals(o) || "<=".equals(o) || ">=".equals(o))) {
            
	resTipo = "boolean";

        }
	
	//String
	if ("string".equals(a) && "char".equals(b) && ("==".equals(o) || "<".equals(o) || ">".equals(o) || "<=".equals(o) || ">=".equals(o))) {
            
	resTipo = "boolean";

        }
	
	if ("string".equals(a) && "string".equals(b) && ("==".equals(o) || "<".equals(o) || ">".equals(o) || "<=".equals(o) || ">=".equals(o))) {
            
	resTipo = "boolean";

        }
	
	//Boolean
	if ("boolean".equals(a) && "boolean".equals(b) && ("==".equals(o) || "<".equals(o) || ">".equals(o) || "<=".equals(o) || ">=".equals(o) || "AND".equals(o) || "NOR".equals(o) || "OR".equals(o))) {
            
	resTipo = "boolean";

        }

    }
void asignatipos(String a,String b, String o)
{
    JOptionPane.showMessageDialog(null,a+ b +o);
    if ("integer".equals(a) && "integer".equals(b) && "=".equals(o)) {
            resTipo = "integer";
        }
    else if ("integer".equals(a) && "float".equals(b) && "=".equals(o)) {
            resTipo = "float";
        }
    else if ("string".equals(a) && "string".equals(b) && "=".equals(o)) {
            resTipo = "string";
        }
    else if ("string".equals(a) && "char".equals(b) && "=".equals(o)) {
            resTipo = "string";
        }
    else if ("char".equals(a) && "char".equals(b) && "=".equals(o)) {
            resTipo = "char";
        }
    else if ("float".equals(a) && "float".equals(b) && "=".equals(o)) {
            resTipo = "float";
        }
    else if ("float".equals(a) && "integer".equals(b) && "=".equals(o)) {
            resTipo = "float";
        }
    else if ("boolean".equals(a) && "boolean".equals(b) && "=".equals(o)) {
            resTipo = "boolean";
        }
    else
    {
        err+="Error";
    }
}
    void cuadruplos(int a)
    {
        
        
        
       switch(a)
       {
           case 1:
            op2=(String) poperandos.pop();
            int tipo1=poperanco2.search(op2);
            String compartip=(String) tiposcompara.elementAt(tipo1-1);
            imprimepilaop2();
            tipos.pop();
            imprimepilatipos();
            op1=(String) poperandos.pop();
            imprimepilaop2();
            int tipo2=poperanco2.search(op1);
            String compartip1=(String) tiposcompara.elementAt(tipo2-1);
            res="r"+indice;
            tipos.pop();
            imprimepilatipos();
            oper=(String) poperadores.pop();
            imprimepilaoperadores();
            comparatipos(compartip, compartip1, oper);
            imprimepilaoperadores();
            model.addRow(new Object[]{num,oper,op1,op2,res});
            poperandos.push(res);
            tipos.push(resTipo);
            imprimepilatipos();
            imprimepilaop2();
            indice++;
            num++;
            break;
            
            case 2:
            op2=null;
            res=(String) poperandos.pop();
            tipos.pop();
            imprimepilatipos();
            imprimepilaop2();
            op1=(String) poperandos.pop();
            
            tipos.pop();
            imprimepilatipos();
            imprimepilaop2();
            oper=(String) poperadores.pop();
            imprimepilaoperadores();
            model.addRow(new Object[]{num,oper,op1,op2,res});
            
            imprimepilatipos();
            System.out.println(op1+" "+op2+" "+oper+" "+res);
            num++;
            break;
            //Acciones IF
            case 3:
                op2=null;
                op1=(String) poperandos.pop();
                tipos.pop();
                imprimepilaop2();
                res=null;
                oper="SF";
                model.addRow(new Object[]{num,oper,op1,op2,res});
                psaltos.push(num);
                imprimepilasaltos();
                num++;
            break;
            case 4:
                op2=null;
                op1=null;
                res=null;
                oper="SI";
                int salto=(int) psaltos.pop();
                imprimepilasaltos();
                model.setValueAt(num, salto-1, 4);
                model.addRow(new Object[]{num,oper,op1,op2,res});
                psaltos.push(num);
                imprimepilasaltos();
                num++;
                break;
            case 5:
                poperadores.pop();
                imprimepilaoperadores();
                salto=(int) psaltos.pop();
                imprimepilasaltos();
                model.setValueAt(num, salto-1, 4);
                
                break;
                //Acciones While
            case 6:
                op2=null;
                op1=null;
                oper="SI";
                salto=(int) psaltos.pop();
                imprimepilasaltos();
                model.setValueAt(num, salto-1, 4);
                model.addRow(new Object[]{num,oper,op1,op2,salto-1});
                num++;
                break;
            case 7:
                op2=null;
                op1=(String) poperandos.pop();
                tipos.pop();
                imprimepilatipos();
                imprimepilaop2();
                res=null;
                oper="SV";
                model.addRow(new Object[]{num,oper,op1,op2,res});
                psaltos.push(num);
                imprimepilasaltos();
                num++;
            break;
            case 8:
            op2=null;
            res=(String) poperandos.pop();
            tipos.pop();
            imprimepilatipos();
            imprimepilaop2();
            op1=(String) poperandos.pop();
            tipos.pop();
            imprimepilatipos();
            imprimepilaop2();
            oper=(String) poperadores.pop();
            imprimepilaoperadores();
            model.addRow(new Object[]{num,oper,op1,op2,res});
            imprimepilatipos();
            
            num++;
            break;
                
                
                
                
       }
    }
       
void analiza()
{
    boolean def=false,iden=false,pcom=false;
    int cont=0;
    int contc=1;
    int cont2=0;
    int edo=0;
    String texto="";
    String string = txta.getText();
    StringTokenizer st =new StringTokenizer(string);
    String cadena2=txta.getText();
   
while(st.hasMoreElements()) 
{
    String token = st.nextElement().toString();
    int reser=reservadas(token);

    if(reser==5 || def==true)
            {
               System.out.println("def"+" true");
               def=true;
                 if(reser==0 || iden==true)
                 {
                     
                     iden=true;

                    if(reser==0){
                         boolean a=poperandos.contains(token);
                        if(a==true)
                        {
                            err+="Error Variable "+token+" ya inicializada \n";
                            
                        }
                        else
                        {
                            poperandos.push(token);
                            poperandoscompara.push(token);
                            imprimepilaop2();
                            cont++;
                            
                        }

                    }

                    if(reser==7)
                    {
                       
                        System.out.println("cont"+cont);
                        for(int i=0;i<cont;i++)
                        {
                            tipos.push("integer");
                            tiposcompara.push("integer");
                            imprimepilatipos();
                            
                        }

                    cont=0;
                    }
                    if(reser==8)
                    {
                        for(int i=0;i<cont;i++)
                        {
                            tipos.push("float");
                            tiposcompara.push("float");
                            imprimepilatipos();
                           
                        }
                     cont=0;

                    }
                    if(reser==9)
                    {
                        for(int i=0;i<cont;i++)//char
                        {
                            tipos.push("char");
                            tiposcompara.push("char");
                            imprimepilatipos();
                        }

                    cont=0;
                    }
                    if(reser==10)
                    {
                        for(int i=0;i<cont;i++)
                        {
                            tipos.push("string");
                            tiposcompara.push("string");
                            imprimepilatipos();
                        }
                      cont=0;

                    }
                    if(reser==11)
                    {
                        for(int i=0;i<cont;i++)
                        {
                            tipos.push("boolean");
                            imprimepilatipos();
                        }

                        cont=0;
                    }
                    

                 }

            }
    
    if(reser==34 || pcom==true)
    {
        if(reser==34)
        {
            if(!poperadores.empty())
            peek=(String) poperadores.peek();
            if("=".equals(peek))
            {
                cuadruplos(2);
            }
            
        }
        if(reser==5 || def==true)
        {
            def=true;
            if(reser==34)
            {def=false;
            pcom=true;
            if (reser==34){
        limpiapilaoperandos(); // se vacian las pilas de tipo y de operandos despues de definir las variables
        limpiapilatipos2();
        }}
        }
        else{
        if(reser==43)
        {
            poperandos.push(token);
            imprimepilaop2();
            poperandoscompara.push(token);
            tipos.push("integer");
            imprimepilatipos();
            tiposcompara.push("integer");
            
        }
        def=false;
        if(reser==12)//if
            {
                If=true;
                poperadores.push("$");
                imprimepilaoperadores();//$ utilizado como fondo falso del if
            }
        if(reser==14)//else
            {
                elsee=true;
                cuadruplos(4);
            }
        if(reser==13)//endif
            {
                endif=true;
                cuadruplos(5);
            }
        if(reser==16)//while
            {
                WHILE=true;
                psaltos.push(num);
                
            }
        if(reser==15)//ENDwhile
            {
                cuadruplos(6);

            }
        if(reser==18)//For
            {
                forr=true;
            }
        if(reser==17)//endfor
            {
                cuadruplos(6);

            }
        if(reser==42)//:
            {
                cuadruplos(8);
            }
        
        
        
        if(reser==0)//si es identificador o palabra reservada if
        {
            
                while(!poperandoscompara.empty())
                {
                    String a=(String)poperandoscompara.pop();
                    poperanco2.push(a);
                }
                int busquea = poperanco2.search(token);
                
                if(busquea>=0){// se busva en la pilas de comparacion para determinar
                System.out.println(busquea-1);                                               //el tipo para el semantico
                tipo=(String) tiposcompara.elementAt(busquea-1);//-1 ya que la funcion search empieza desde 1 y no 0
                tipos.push(tipo);
                imprimepilatipos();
                poperandos.push(token);
                imprimepilaop2();
                
                if(plus==true || resta==true || multi == true || men==true || may==true || meni==true || mayi==true || difde==true)
                {
                 
                    cuadruplos(1);
                    plus=false;
                    multi=false;
                    resta=false;
                    men=false;
                    may=false;
                    mayi=false;meni=false;difde=false;
                    if(If==true)
                    {
                        cuadruplos(3);
                        If=false;
                    }
                    if(WHILE==true)
                    {
                        cuadruplos(3);
                        WHILE=false;
                    }
                    if(forr==true)
                    {
                        cuadruplos(7);
                        forr=false;
                        
                    }
                   
                }
                

                }
                else
                {
                    err+= "Varible "+token+ " no definida \n";
                    
                    tipos.push("integer");
                    
                    poperandos.push(token);
                    poperandoscompara.push(token);
                    tiposcompara.push("integer");
                    imprimepilaop2();
                    imprimepilatipos();
                    if(plus==true || resta==true || multi == true || men==true || may==true || meni==true || mayi==true || difde==true)
                {
                    
                    cuadruplos(1);
                    plus=false;
                    multi=false;
                    resta=false;
                    men=false;
                    may=false;
                    mayi=false;meni=false;difde=false;
                    if(If==true)
                    {
                        cuadruplos(3);
                        If=false;
                    }
                    if(If==true)
                    {
                        cuadruplos(3);
                        If=false;
                    }
                    
                }
                    

                
                }
                
            
                
        }
        if(reser==28)//+
        {
            plus=true;
            poperadores.push(token);
            imprimepilaoperadores();
            System.out.println("JH"+poperadores.peek());
            
        }
        if(reser==29)//-
        {
            resta=true;
            poperadores.push(token);
            imprimepilaoperadores();
        }
        if(reser==30)//*
        {
            multi=true;
            poperadores.push(token);
            imprimepilaoperadores();
        }
         if(reser==31)// /
        {
            poperadores.push(token);
            imprimepilaoperadores();
        }
          if(reser==32)// =
        {
            igual=true;
            poperadores.push(token);
            imprimepilaoperadores();
        }
          if(reser==35)// <
        {
            men=true;
            poperadores.push(token);
            imprimepilaoperadores();
        }
            if(reser==36)// >
        {
            may=true;
            poperadores.push(token);
            imprimepilaoperadores();
        }
              if(reser==37)// >=
        {
            mayi=true;
            poperadores.push(token);
            imprimepilaoperadores();
        }
                if(reser==38)// <=
        {
            meni=true;
            poperadores.push(token);
            imprimepilaoperadores();
        }
                if(reser==39)// !=
        {
            difde=true;
            poperadores.push(token);
            imprimepilaoperadores();
        }
    }
    }
    
   
}

imprimepilaop2();


// 6
}
void imprimepilatipos()
{
    for(int i=0;i<tipos.size();i++){
        tip+=tipos.elementAt(i)+" ";
    }
    tip+="\n";
    txttipos.setText(tip);
   
}
void imprimepilasaltos()
{
    for(int i=0;i<psaltos.size();i++){
        saltos+=psaltos.elementAt(i)+" ";
    }
    saltos+="\n";
    txtsaltos.setText(saltos);
   
}
void imprimepilatiposc()
{
    for(int i=0;i<tipos.size();i++){
        tipoq+=tipos.elementAt(i)+" ";
    }
    tipoq+="\n";
    txtsaltos.setText(tipoq);
   
}
void limpiapilatipos2()
{
    while(!tipos.empty())
    {
        tipos.pop();
    }
   
}
void imprimepilaoperadores()
{
    for(int i=0;i<poperadores.size();i++){
        operadores+=poperadores.elementAt(i)+" ";
    }
    operadores+="\n";
    txtoperadores.setText(operadores);
}
void limpiapilaoperandos()
{
   while(!poperandos.empty())
    {
        poperandos.pop();
    }
}
void imprimepilaop2()
{
    for(int i=0;i<poperandos.size();i++){
        operando+=poperandos.elementAt(i)+" ";
    }
    operando+="\n";
    txtoperandos.setText(operando);
   
}
void imprimepilaop3()
{
    for(int i=0;i<poperandoscompara.size();i++){
        operando1+=poperandoscompara.elementAt(i)+" ";
    }
    operando1+="\n";
    txtsaltos.setText("\n"+operando1);
   
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        saltos="";
        err="";
        indice=1;
        num=1;
        tabla.setModel(model);
        model.setRowCount(0);
        peek="";
        txttipos.setText("");
        txtoperandos.setText("");
        txterr.setText("");
        tip="";
        operando="";
        operadores="";
        poperadores.clear();
        poperandos.clear();
        tipos.clear();
        poperandoscompara.clear();
        tiposcompara.clear();
        tipos.clear();
        psaltos.clear();
        analiza();
        txterr.setText(err);// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Analizador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable tabla;
    private javax.swing.JTextPane txta;
    private javax.swing.JTextPane txterr;
    private javax.swing.JTextArea txtoperadores;
    private javax.swing.JTextArea txtoperandos;
    private javax.swing.JTextPane txtsaltos;
    private javax.swing.JTextArea txttipos;
    // End of variables declaration//GEN-END:variables
}
